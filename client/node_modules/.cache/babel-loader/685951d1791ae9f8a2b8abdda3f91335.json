{"ast":null,"code":"import axios from 'axios';\nimport { AUTH_SIGN_UP, AUTH_SIGN_OUT, AUTH_SIGN_IN, AUTH_LINK_GOOGLE, AUTH_LINK_FACEBOOK, AUTH_UNLINK_GOOGLE, AUTH_UNLINK_FACEBOOK, AUTH_ERROR, DASHBOARD_GET_DATA } from '../types/authUserTypes';\nexport const signUp = data => {\n  return async dispatch => {\n    try {\n      const response = await axios.post('http://localhost:8080/signup', data);\n      console.log(\"signUp axios\");\n      dispatch({\n        type: AUTH_SIGN_UP,\n        Token: response.Token\n      });\n    } catch (err) {\n      dispatch({\n        type: AUTH_ERROR,\n        payload: err\n      });\n    }\n  };\n};\nexport const signIn = data => {\n  return async dispatch => {\n    try {\n      await axios.post('http://localhost:3000/8080/signin', data);\n      dispatch({\n        type: AUTH_SIGN_IN\n      });\n    } catch (err) {\n      dispatch({\n        type: AUTH_ERROR,\n        payload: 'Email and password combination isn\\'t valid'\n      });\n    }\n  };\n};\nexport const oauthGoogle = data => {\n  return async dispatch => {\n    const res = await axios.post('http://localhost:5000/users/oauth/google', {\n      access_token: data\n    });\n    dispatch({\n      type: AUTH_SIGN_UP,\n      payload: res.data.token\n    });\n    localStorage.setItem('JWT_TOKEN', res.data.token);\n    axios.defaults.headers.common['Authorization'] = res.data.token;\n  };\n};\nexport const oauthFacebook = data => {\n  return async dispatch => {\n    const res = await axios.post('http://localhost:5000/users/oauth/facebook', {\n      access_token: data\n    });\n    dispatch({\n      type: AUTH_SIGN_UP,\n      payload: res.data.token\n    });\n    localStorage.setItem('JWT_TOKEN', res.data.token);\n    axios.defaults.headers.common['Authorization'] = res.data.token;\n  };\n};","map":{"version":3,"sources":["/storage/emulated/0/projects/offer/offer/client/src/store/actions/users.js"],"names":["axios","AUTH_SIGN_UP","AUTH_SIGN_OUT","AUTH_SIGN_IN","AUTH_LINK_GOOGLE","AUTH_LINK_FACEBOOK","AUTH_UNLINK_GOOGLE","AUTH_UNLINK_FACEBOOK","AUTH_ERROR","DASHBOARD_GET_DATA","signUp","data","dispatch","response","post","console","log","type","Token","err","payload","signIn","oauthGoogle","res","access_token","token","localStorage","setItem","defaults","headers","common","oauthFacebook"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SACEC,YADF,EAEEC,aAFF,EAGEC,YAHF,EAIEC,gBAJF,EAKEC,kBALF,EAMEC,kBANF,EAOEC,oBAPF,EAQEC,UARF,EASEC,kBATF,QAS4B,wBAT5B;AAWC,OAAO,MAAMC,MAAM,GAAGC,IAAI,IAAI;AAC7B,SAAO,MAAMC,QAAN,IAAkB;AACvB,QAAI;AACF,YAAMC,QAAQ,GAAG,MAAMb,KAAK,CAACc,IAAN,CAAW,8BAAX,EAA2CH,IAA3C,CAAvB;AACDI,MAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACCJ,MAAAA,QAAQ,CAAC;AACPK,QAAAA,IAAI,EAAEhB,YADC;AAEPiB,QAAAA,KAAK,EAAEL,QAAQ,CAACK;AAFT,OAAD,CAAR;AAID,KAPD,CAOE,OAAMC,GAAN,EAAW;AACXP,MAAAA,QAAQ,CAAC;AACPK,QAAAA,IAAI,EAAET,UADC;AAEPY,QAAAA,OAAO,EAAED;AAFF,OAAD,CAAR;AAID;AACF,GAdD;AAeD,CAhBO;AAkBR,OAAO,MAAME,MAAM,GAAGV,IAAI,IAAI;AAC5B,SAAO,MAAMC,QAAN,IAAkB;AACvB,QAAI;AACF,YAAMZ,KAAK,CAACc,IAAN,CAAW,mCAAX,EAAgDH,IAAhD,CAAN;AAEAC,MAAAA,QAAQ,CAAC;AACPK,QAAAA,IAAI,EAAEd;AADC,OAAD,CAAR;AAGD,KAND,CAME,OAAMgB,GAAN,EAAW;AACXP,MAAAA,QAAQ,CAAC;AACPK,QAAAA,IAAI,EAAET,UADC;AAEPY,QAAAA,OAAO,EAAE;AAFF,OAAD,CAAR;AAID;AACF,GAbD;AAcD,CAfM;AAkBP,OAAO,MAAME,WAAW,GAAGX,IAAI,IAAI;AACjC,SAAO,MAAMC,QAAN,IAAkB;AACvB,UAAMW,GAAG,GAAG,MAAMvB,KAAK,CAACc,IAAN,CAAW,0CAAX,EAAuD;AACvEU,MAAAA,YAAY,EAAEb;AADyD,KAAvD,CAAlB;AAIAC,IAAAA,QAAQ,CAAC;AACPK,MAAAA,IAAI,EAAEhB,YADC;AAEPmB,MAAAA,OAAO,EAAEG,GAAG,CAACZ,IAAJ,CAASc;AAFX,KAAD,CAAR;AAKAC,IAAAA,YAAY,CAACC,OAAb,CAAqB,WAArB,EAAkCJ,GAAG,CAACZ,IAAJ,CAASc,KAA3C;AACAzB,IAAAA,KAAK,CAAC4B,QAAN,CAAeC,OAAf,CAAuBC,MAAvB,CAA8B,eAA9B,IAAiDP,GAAG,CAACZ,IAAJ,CAASc,KAA1D;AACD,GAZD;AAaD,CAdM;AAgBP,OAAO,MAAMM,aAAa,GAAGpB,IAAI,IAAI;AACnC,SAAO,MAAMC,QAAN,IAAkB;AACvB,UAAMW,GAAG,GAAG,MAAMvB,KAAK,CAACc,IAAN,CAAW,4CAAX,EAAyD;AACzEU,MAAAA,YAAY,EAAEb;AAD2D,KAAzD,CAAlB;AAIAC,IAAAA,QAAQ,CAAC;AACPK,MAAAA,IAAI,EAAEhB,YADC;AAEPmB,MAAAA,OAAO,EAAEG,GAAG,CAACZ,IAAJ,CAASc;AAFX,KAAD,CAAR;AAKAC,IAAAA,YAAY,CAACC,OAAb,CAAqB,WAArB,EAAkCJ,GAAG,CAACZ,IAAJ,CAASc,KAA3C;AACAzB,IAAAA,KAAK,CAAC4B,QAAN,CAAeC,OAAf,CAAuBC,MAAvB,CAA8B,eAA9B,IAAiDP,GAAG,CAACZ,IAAJ,CAASc,KAA1D;AACD,GAZD;AAaD,CAdM","sourcesContent":["import axios from 'axios';\r\nimport { \r\n  AUTH_SIGN_UP, \r\n  AUTH_SIGN_OUT, \r\n  AUTH_SIGN_IN,\r\n  AUTH_LINK_GOOGLE, \r\n  AUTH_LINK_FACEBOOK,\r\n  AUTH_UNLINK_GOOGLE,\r\n  AUTH_UNLINK_FACEBOOK, \r\n  AUTH_ERROR,\r\n  DASHBOARD_GET_DATA } from '../types/authUserTypes'\r\n \r\n export const signUp = data => {\r\n  return async dispatch => {\r\n    try {\r\n      const response = await axios.post('http://localhost:8080/signup', data);\r\n     console.log(\"signUp axios\") \r\n      dispatch({\r\n        type: AUTH_SIGN_UP, \r\n        Token: response.Token\r\n      });\r\n    } catch(err) {\r\n      dispatch({\r\n        type: AUTH_ERROR,\r\n        payload: err\r\n      })\r\n    }\r\n  };\r\n}\r\n\r\nexport const signIn = data => {\r\n  return async dispatch => {\r\n    try {\r\n      await axios.post('http://localhost:3000/8080/signin', data);\r\n\r\n      dispatch({\r\n        type: AUTH_SIGN_IN\r\n      });\r\n    } catch(err) {\r\n      dispatch({\r\n        type: AUTH_ERROR,\r\n        payload: 'Email and password combination isn\\'t valid'\r\n      })\r\n    }\r\n  };\r\n}\r\n\r\n\r\nexport const oauthGoogle = data => {\r\n  return async dispatch => {\r\n    const res = await axios.post('http://localhost:5000/users/oauth/google', {\r\n      access_token: data\r\n    });\r\n \r\n    dispatch({\r\n      type: AUTH_SIGN_UP,\r\n      payload: res.data.token\r\n    });\r\n \r\n    localStorage.setItem('JWT_TOKEN', res.data.token);\r\n    axios.defaults.headers.common['Authorization'] = res.data.token;\r\n  };\r\n}\r\n \r\nexport const oauthFacebook = data => {\r\n  return async dispatch => {\r\n    const res = await axios.post('http://localhost:5000/users/oauth/facebook', {\r\n      access_token: data\r\n    });\r\n \r\n    dispatch({\r\n      type: AUTH_SIGN_UP,\r\n      payload: res.data.token\r\n    });\r\n \r\n    localStorage.setItem('JWT_TOKEN', res.data.token);\r\n    axios.defaults.headers.common['Authorization'] = res.data.token;\r\n  };\r\n}"]},"metadata":{},"sourceType":"module"}